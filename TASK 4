from datetime import datetime, timedelta

class LibraryItem:
    def __init__(self, title, author, category):
        self.title = title
        self.author = author
        self.category = category
        self.checked_out = False
        self.due_date = None

class Book(LibraryItem):
    def __init__(self, title, author, category, isbn):
        super().__init__(title, author, category)
        self.isbn = isbn

class Magazine(LibraryItem):
    def __init__(self, title, author, category, issue_number):
        super().__init__(title, author, category)
        self.issue_number = issue_number

class DVD(LibraryItem):
    def __init__(self, title, director, category, runtime):
        super().__init__(title, director, category)
        self.runtime = runtime

class User:
    def __init__(self, name):
        self.name = name
        self.checked_out_items = []
        self.fines = 0.0

    def check_out_item(self, item):
        if not item.checked_out:
            item.checked_out = True
            item.due_date = datetime.now() + timedelta(days=14)  # 2 weeks loan period
            self.checked_out_items.append(item)
            print(f"{item.title} checked out successfully.")
        else:
            print(f"{item.title} is already checked out.")

    def return_item(self, item):
        if item in self.checked_out_items:
            self.checked_out_items.remove(item)
            overdue_days = (datetime.now() - item.due_date).days
            if overdue_days > 0:
                fine = overdue_days * 0.50  # $0.50 per day fine
                self.fines += fine
                print(f"{item.title} returned late. Fine: ${fine:.2f}")
            else:
                print(f"{item.title} returned on time.")
            item.checked_out = False
            item.due_date = None
        else:
            print(f"{item.title} was not checked out by this user.")

class Library:
    def __init__(self):
        self.items = []
        self.users = []

    def add_item(self, item):
        self.items.append(item)
        print(f"{item.title} added to the library.")

    def search_items(self, title=None, author=None, category=None):
        results = [item for item in self.items if
                   (title is None or title.lower() in item.title.lower()) and
                   (author is None or author.lower() in item.author.lower()) and
                   (category is None or category.lower() in item.category.lower())]
        return results

    def get_user_fines(self, user):
        return user.fines

# Example usage
library = Library()

# Adding items
library.add_item(Book("1984", "George Orwell", "Fiction", "123456789"))
library.add_item(Magazine("Time", "Time Inc.", "News", "2023-08"))
library.add_item(DVD("Inception", "Christopher Nolan", "Sci-Fi", 148))

# Adding a user
user = User("Alice")
library.users.append(user)

# User checks out a book
user.check_out_item(library.items[0])

# User returns a book
user.return_item(library.items[0])

# Searching for items
search_results = library.search_items(title="1984")
print("Search Results:")
for item in search_results:
    print(item.title)

# Get user fines
print(f"Total fines for {user.name}: ${library.get_user_fines(user):.2f}")
