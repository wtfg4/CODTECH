Creating a full-fledged inventory management system with user authentication, data validation, and a graphical user interface (GUI) is a complex task. Below, I'll provide a basic implementation using Python, including key components such as product management, inventory tracking, user authentication, and a simple GUI with Tkinter. 

### Prerequisites

- Python 3.x
- Tkinter library (included with standard Python installation)
- `pickle` library for data serialization (also included with Python)

### Implementation

#### 1. **User Authentication**

We'll implement a simple user authentication system using hardcoded credentials. In a real-world application, you would use a secure database for storing user credentials.

#### 2. **Product Management**

This includes adding, editing, and deleting products, as well as tracking inventory levels.

#### 3. **Inventory Tracking and Reports**

This includes generating low-stock alerts and sales summaries.

#### 4. **GUI with Tkinter**

We'll use Tkinter to create a basic GUI for the system.

### Code

```python
import tkinter as tk
from tkinter import messagebox
import pickle

# User Authentication
users = {"admin": "password"}  # Example: {"username": "password"}
current_user = None

# Product Management
class Product:
    def __init__(self, name, quantity, price):
        self.name = name
        self.quantity = quantity
        self.price = price

class Inventory:
    def __init__(self):
        self.products = {}

    def add_product(self, name, quantity, price):
        if name in self.products:
            self.products[name].quantity += quantity
        else:
            self.products[name] = Product(name, quantity, price)

    def edit_product(self, name, quantity, price):
        if name in self.products:
            self.products[name].quantity = quantity
            self.products[name].price = price
        else:
            print("Product not found.")

    def delete_product(self, name):
        if name in self.products:
            del self.products[name]
        else:
            print("Product not found.")

    def generate_low_stock_alerts(self, threshold=5):
        alerts = []
        for product in self.products.values():
            if product.quantity < threshold:
                alerts.append((product.name, product.quantity))
        return alerts

    def generate_sales_summary(self):
        summary = []
        for product in self.products.values():
            summary.append((product.name, product.quantity, product.price))
        return summary

# GUI
class InventoryGUI:
    def __init__(self, root, inventory):
        self.root = root
        self.inventory = inventory
        self.root.title("Inventory Management System")

        # Frames
        self.login_frame = tk.Frame(self.root)
        self.main_frame = tk.Frame(self.root)
        self.product_frame = tk.Frame(self.root)

        # Login Frame
        self.username_label = tk.Label(self.login_frame, text="Username:")
        self.username_entry = tk.Entry(self.login_frame)
        self.password_label = tk.Label(self.login_frame, text="Password:")
        self.password_entry = tk.Entry(self.login_frame, show="*")
        self.login_button = tk.Button(self.login_frame, text="Login", command=self.authenticate_user)

        self.username_label.grid(row=0, column=0)
        self.username_entry.grid(row=0, column=1)
        self.password_label.grid(row=1, column=0)
        self.password_entry.grid(row=1, column=1)
        self.login_button.grid(row=2, columnspan=2)

        self.login_frame.pack(pady=10)

        # Main Frame
        self.add_button = tk.Button(self.main_frame, text="Add Product", command=self.show_add_product)
        self.edit_button = tk.Button(self.main_frame, text="Edit Product", command=self.show_edit_product)
        self.delete_button = tk.Button(self.main_frame, text="Delete Product", command=self.show_delete_product)
        self.low_stock_button = tk.Button(self.main_frame, text="Low Stock Alerts", command=self.show_low_stock_alerts)
        self.sales_summary_button = tk.Button(self.main_frame, text="Sales Summary", command=self.show_sales_summary)

        self.add_button.grid(row=0, column=0, padx=10, pady=5)
        self.edit_button.grid(row=0, column=1, padx=10, pady=5)
        self.delete_button.grid(row=0, column=2, padx=10, pady=5)
        self.low_stock_button.grid(row=1, column=0, padx=10, pady=5)
        self.sales_summary_button.grid(row=1, column=1, padx=10, pady=5)

    def authenticate_user(self):
        global current_user
        username = self.username_entry.get()
        password = self.password_entry.get()

        if username in users and users[username] == password:
            current_user = username
            self.login_frame.pack_forget()
            self.main_frame.pack()
        else:
            messagebox.showerror("Login Error", "Invalid username or password.")

    def show_add_product(self):
        self.main_frame.pack_forget()
        self.product_frame.pack()

        self.name_label = tk.Label(self.product_frame, text="Product Name:")
        self.name_entry = tk.Entry(self.product_frame)
        self.quantity_label = tk.Label(self.product_frame, text="Quantity:")
        self.quantity_entry = tk.Entry(self.product_frame)
        self.price_label = tk.Label(self.product_frame, text="Price:")
        self.price_entry = tk.Entry(self.product_frame)
        self.submit_button = tk.Button(self.product_frame, text="Add", command=self.add_product)

        self.name_label.grid(row=0, column=0)
        self.name_entry.grid(row=0, column=1)
        self.quantity_label.grid(row=1, column=0)
        self.quantity_entry.grid(row=1, column=1)
        self.price_label.grid(row=2, column=0)
        self.price_entry.grid(row=2, column=1)
        self.submit_button.grid(row=3, columnspan=2)

    def add_product(self):
        name = self.name_entry.get()
        try:
            quantity = int(self.quantity_entry.get())
            price = float(self.price_entry.get())
            self.inventory.add_product(name, quantity, price)
            messagebox.showinfo("Success", "Product added successfully!")
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter numerical values for quantity and price.")
        self.product_frame.pack_forget()
        self.main_frame.pack()

    def show_edit_product(self):
        self.main_frame.pack_forget()
        self.product_frame.pack()

        self.name_label = tk.Label(self.product_frame, text="Product Name:")
        self.name_entry = tk.Entry(self.product_frame)
        self.quantity_label = tk.Label(self.product_frame, text="New Quantity:")
        self.quantity_entry = tk.Entry(self.product_frame)
        self.price_label = tk.Label(self.product_frame, text="New Price:")
        self.price_entry = tk.Entry(self.product_frame)
        self.submit_button = tk.Button(self.product_frame, text="Edit", command=self.edit_product)

        self.name_label.grid(row=0, column=0)
        self.name_entry.grid(row=0, column=1)
        self.quantity_label.grid(row=1, column=0)
        self.quantity_entry.grid(row=1, column=1)
        self.price_label.grid(row=2, column=0)
        self.price_entry.grid(row=2, column=1)
        self.submit_button.grid(row=3, columnspan=2)

    def edit_product(self):
        name = self.name_entry.get()
        try:
            quantity = int(self.quantity_entry.get())
            price = float(self.price_entry.get())
            if name in self.inventory.products:
                self.inventory.edit_product(name, quantity, price)
                messagebox.showinfo("Success", "Product updated successfully!")
            else:
                messagebox.showerror("Error", "Product not found.")
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter numerical values for quantity and price.")
        self.product_frame.pack_forget()
        self.main_frame.pack()

    def show_delete_product(self):
        self.main_frame.pack_forget()
        self.product_frame.pack()

        self.name_label = tk.Label(self.product_frame, text="Product Name:")
        self.name_entry = tk.Entry(self.product_frame)
        self.submit_button = tk.Button(self.product_frame, text="Delete", command=self.delete_product)

        self.name_label.grid(row=0, column=0)
        self.name_entry.grid(row=0, column=1)
        self.submit_button.grid(row=1, columnspan=2)

    def delete_product(self):
        name = self.name_entry.get()
        if name in self.inventory.products:
            self.inventory.delete_product(name)
            messagebox.showinfo("Success", "Product deleted successfully!")
        else:
            messagebox.showerror("Error", "Product not found.")
        self.product_frame.pack_forget()
        self.main_frame.pack()

    def show_low_stock_alerts(self):
        alerts = self.inventory.generate_low_stock_alerts()
        if alerts:
            alert_text = "\n".join([f"{name}: {quantity}" for name, quantity in alerts])
            messagebox.showinfo("Low Stock Alerts", alert_text)
        else:
            messagebox.showinfo("Low Stock Alerts", "No products are low in stock.")

    def show_sales_summary(self):
        summary = self.inventory.generate_sales_summary()
        if summary:
            summary_text = "\n".join([f"{name}: {quantity} units at ${price}" for name, quantity, price in summary])
            messagebox.showinfo("Sales Summary", summary_text)
        else:
            messagebox.showinfo("Sales Summary", "No sales data available.")

def main():
    try:
        with open("inventory.pkl", "rb
